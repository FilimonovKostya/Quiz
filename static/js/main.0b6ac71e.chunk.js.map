{"version":3,"sources":["Components/Preloader.module.css","Components/Question.tsx","Api/api.ts","Redux/quizReducer.ts","Components/Answer.tsx","Components/Preloader.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["module","exports","Question","props","className","questions","instance","axios","create","baseURL","getQuestions","getAPI","get","initialState","results","counterRightAnswers","isLoading","totalCounter","Answer","dispatch","useDispatch","useState","inputAnswer","setInputAnswer","answers","map","el","index","onClick","type","value","name","counter","rightAnswers","counterRightAnswerAC","Preloader","style","loader","App","useSelector","state","quiz","question","incorrect_answers","correct_answer","unionAnswers","concat","sort","Math","random","useEffect","then","res","dataResponse","data","setQuestionsAC","length","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","actions","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b6ac71e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2ztxC\",\"animate\":\"Preloader_animate__1A0Ck\"};","import React from \"react\";\r\n\r\ntype QuestionPropsType = {\r\n    questions: string\r\n}\r\n\r\nexport const Question = (props: QuestionPropsType) => {\r\n    return <p className=\"quiz-form__question\">{props.questions}</p>\r\n}","import axios from \"axios\";\r\nimport {ResponseType} from '../Redux/quizReducer'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple',\r\n})\r\nconst token = '2b44725ad5e68a67b69394893410cae789b590d924b38ad1464b2a951c9c10b7'\r\n\r\nexport const getQuestions = () => {\r\n    return {\r\n        getAPI: () => {\r\n            return instance.get<ResponseType>(``)\r\n        }\r\n    }\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {getQuestions} from \"../Api/api\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setQuestionsAC>\r\n    | ReturnType<typeof setLoadStatusAC>\r\n    | ReturnType<typeof changeTotalCounterAC>\r\n    | ReturnType<typeof counterRightAnswerAC>\r\n\r\nexport type ResponseType = {\r\n    results: ResultsType[]\r\n    totalCounter: number\r\n    counterRightAnswers: number\r\n    isLoading: boolean\r\n}\r\n\r\ntype ResultsType = {\r\n    category: string\r\n    type: string\r\n    difficulty: string\r\n    question: string\r\n    correct_answer: string\r\n    incorrect_answers: string[]\r\n}\r\n\r\nconst initialState: ResponseType = {\r\n    results: [],\r\n    counterRightAnswers: 0,\r\n    isLoading: false,\r\n    totalCounter: 0\r\n}\r\n\r\nexport const quizReducer = (state = initialState, actions: ActionsType): ResponseType => {\r\n    switch (actions.type) {\r\n        case \"SET-QUESTIONS\":\r\n            return {...state, results: actions.dataResponse}\r\n        case \"SET-LOADING-STATUS\":\r\n            return {...state, isLoading: actions.isLoading}\r\n        case \"CHANGE-TOTAL-COUNTER\":\r\n            return {...state, totalCounter: actions.counter}\r\n        case \"CHANGE-RIGHT-COUNTER\":\r\n            return {...state, counterRightAnswers: actions.counter}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setQuestionsAC = (dataResponse: ResultsType[]) => ({type: 'SET-QUESTIONS', dataResponse} as const)\r\nexport const setLoadStatusAC = (isLoading: boolean) => ({type: 'SET-LOADING-STATUS', isLoading} as const)\r\nexport const changeTotalCounterAC = (counter: number) => ({type: 'CHANGE-TOTAL-COUNTER', counter} as const)\r\nexport const counterRightAnswerAC = (counter: number) => ({type: 'CHANGE-RIGHT-COUNTER', counter} as const)\r\n\r\nexport const getQuestionTC = (dataResponse: ResultsType[]) => (dispatch: Dispatch<ActionsType>) => {\r\n    getQuestions().getAPI()\r\n        .then((res) => {\r\n            dispatch(setQuestionsAC(dataResponse))\r\n            dispatch(setLoadStatusAC(true))\r\n        })\r\n}","import React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTotalCounterAC, counterRightAnswerAC} from \"../Redux/quizReducer\";\r\n\r\n\r\ntype AnswerPropsType = {\r\n    answers: string[]\r\n    totalCounter: number\r\n    counterRightAnswers: number\r\n    rightAnswers: string\r\n}\r\n\r\nexport const Answer = (props: AnswerPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const [inputAnswer,setInputAnswer] = useState('')\r\n\r\n    const callBackClickHandler = () => {\r\n        dispatch(changeTotalCounterAC(props.totalCounter + 1))\r\n        if(inputAnswer === props.rightAnswers){\r\n            dispatch(counterRightAnswerAC(props.counterRightAnswers + 1))\r\n        }\r\n    }\r\n\r\n    return <>\r\n        {\r\n            props.answers.map((el, index) => {\r\n                const callBackInputValue = () => {\r\n                        setInputAnswer(el)\r\n                }\r\n                return <label key={index} onClick={callBackInputValue} className=\"quiz-form__ans\">\r\n                    <input type=\"radio\" value={el} name={'q1'}/>\r\n                    <span className=\"design\"/>\r\n                    <span className=\"text\">{el}</span>\r\n                </label>\r\n            })}\r\n        <div className=\"submit\" onClick={callBackClickHandler} > SUBMIT </div>\r\n    </>\r\n\r\n}\r\n","import React from 'react';\r\nimport style from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n  return <div className={style.loader}>\r\n      <span/>\r\n      <span/>\r\n      <span/>\r\n      <span/>\r\n  </div>\r\n};\r\n\r\nexport default Preloader;","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Question} from './Components/Question';\nimport {Answer} from \"./Components/Answer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getQuestions} from \"./Api/api\";\nimport {getQuestionTC} from \"./Redux/quizReducer\";\nimport {RootStoreType} from \"./Redux/store\";\nimport Preloader from \"./Components/Preloader\";\n\n\n// запуск теста по кнопке;\n// отображение 4 вариантов ответа на вопрос;\n// после выбора ответа необходимо показывать следующий вопрос до конца теста;\n// в конце пользователю оглашается результат тестирования (общее время прохождения теста, количество правильных ответов, сообщение статуса прохождения теста).\n\n\nfunction App() {\n    const isLoading = useSelector<RootStoreType, boolean>(state => state.quiz.isLoading)\n    const questions = useSelector<RootStoreType, string[]>(state => state.quiz.results.map(el => el.question))\n    const answers = useSelector<RootStoreType, string[][]>(state => state.quiz.results.map(el => el.incorrect_answers))\n    const totalCounter = useSelector<RootStoreType, number>(state => state.quiz.totalCounter)\n    const rightAnswers = useSelector<RootStoreType, string[]>(state => state.quiz.results.map(el => el.correct_answer))\n    const unionAnswers = [rightAnswers[totalCounter]].concat(answers[totalCounter]).sort(() => 0.5 - Math.random())\n    const counterRightAnswers = useSelector<RootStoreType, number>(state => state.quiz.counterRightAnswers)\n\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        getQuestions().getAPI()\n            .then(((res) => {\n                dispatch(getQuestionTC(res.data.results))\n            }))\n    }, [dispatch])\n\n\n    if (!isLoading) {\n        return <Preloader />\n    }\n\n    return <div className=\"container\">\n        <div className=\"heading\">\n            <h1 className=\"heading__text\">Quiz</h1>\n        </div>\n\n        <div className=\"quiz\">\n            <div className=\"quiz-form__quiz\">\n                {totalCounter !== questions.length\n                    ? <>\n                        <Question questions={questions[totalCounter]}/>\n                        <Answer answers={unionAnswers} counterRightAnswers={counterRightAnswers} rightAnswers={rightAnswers[totalCounter]}\n                                totalCounter={totalCounter}/>\n                    </>\n                    : <h1 style={{textAlign: \"center\"}}>Всего ответили правильно на {counterRightAnswers} из {totalCounter}</h1>\n                }\n            </div>\n        </div>\n    </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {quizReducer} from \"./quizReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    quiz: quizReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}