{"version":3,"sources":["Answer.tsx","Question.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Answer","props","className","answer","questionsID","map","el","index","isRight","right","wrong","onClick","changeAnswerAndQuestion","id","setRight","setWrong","Question","question","App","firstQuestionID","v1","secondQuestionID","thirdQuestionID","useState","currentQuestion","setCurrentQuestion","rightAnswer","setRightAnswer","title","questions","state","titleForQuestion","answersID","console","log","length","Fragment","questionID","answerID","find","f","setTimeout","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAaaA,EAAS,SAACC,GAGnB,OAAO,qBAAKC,UAAW,kBAAhB,SACH,oBAAIA,UAAW,UAAf,SAEQD,EAAME,OAAOF,EAAMG,aAAaC,KAAI,SAACC,EAAIC,GAYrC,OAAO,qBAAgBL,UAAWI,EAAGE,QAAUP,EAAMQ,MAAQR,EAAMS,MAAOC,QAXnD,WAEfL,EAAGE,SACHP,EAAMW,wBAAwBX,EAAMG,YAAaE,EAAGO,IACpDZ,EAAMa,SAAS,WAGfb,EAAMW,wBAAwBX,EAAMG,YAAaE,EAAGO,IACpDZ,EAAMc,SAAS,WAGhB,cAA8FT,EAAGH,OAAjG,MAASI,WCzBvBS,G,MAAW,SAACf,GACrB,OAAO,sBAAKC,UAAW,oBAAhB,UACH,0CACA,+BAAKD,EAAMgB,SAAX,c,QCkHOC,MAtGf,WAAgB,IAAD,EAELC,EAAkBC,cAClBC,EAAmBD,cACnBE,EAAkBF,cAJb,EAOeG,mBAAS,IAPxB,mBAOJd,EAPI,KAOGK,EAPH,OAQeS,mBAAS,IARxB,mBAQJb,EARI,KAQGK,EARH,OAUmCQ,mBAAS,GAV5C,mBAUJC,EAVI,KAUaC,EAVb,OAY2BF,mBAAS,GAZpC,mBAYJG,EAZI,KAYSC,EAZT,OAcuBJ,mBAA8B,CAC5D,CAACV,GAAIM,EAAiBS,MAAO,2DAC7B,CAACf,GAAIQ,EAAkBO,MAAO,wHAC9B,CAACf,GAAIS,EAAiBM,MAAO,mEAjBtB,mBAcJC,EAdI,aAoBeN,oBAAQ,mBAC7BJ,EAAkB,CACf,CACIN,GAAIM,EACJhB,OAAQ,qgBACRK,SAAS,GAEb,CAACK,GAAIO,cAAMjB,OAAQ,yIAA4BK,SAAS,GACxD,CAACK,GAAIO,cAAMjB,OAAQ,qLAAqCK,SAAS,KARvC,cAU7Ba,EAAmB,CAChB,CACIR,GAAIO,cACJjB,OAAQ,uJACRK,SAAS,GAEb,CAACK,GAAIQ,EAAkBlB,OAAQ,sLAAgDK,SAAS,GACxF,CAACK,GAAIO,cAAMjB,OAAQ,4IAA+BK,SAAS,KAjBjC,cAmB7Bc,EAAkB,CACf,CACIT,GAAIO,cACJjB,OAAQ,+DACRK,SAAS,GAEb,CACIK,GAAIO,cACJjB,OAAQ,ioBACRK,SAAS,GAEb,CACIK,GAAIS,EACJnB,OAAQ,qmBACRK,SAAS,KAjCa,KApBvB,mBAoBJsB,EApBI,KA4DLC,GA5DK,KA4DcF,EAAUxB,KAAI,SAAAC,GAAE,OAAIA,EAAGsB,UAC1CI,EAAYH,EAAUxB,KAAI,SAAAC,GAAE,OAAIA,EAAGO,MAoBzC,OAFAoB,QAAQC,IAAIR,GAEL,qBAAKxB,UAAW,UAAhB,SACH,qBAAKA,UAAW,YAAhB,SAEQ2B,EAAUM,OAASX,EACb,eAAC,IAAMY,SAAP,WACE,cAAC,EAAD,CAAUnB,SAAUc,EAAiBP,KACrC,cAAC,EAAD,CAAQrB,OAAQ2B,EAAO1B,YAAa4B,EAAUR,GACtCZ,wBAzBI,SAACyB,EAAoBC,GAEjD,IAAIrB,EAAWa,EAAMO,GAAYE,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOyB,KACpDG,YAAW,WACHxB,GAAYA,EAASJ,KAAOwB,GAC5BZ,EAAmBD,EAAkB,GACrCG,EAAeD,EAAc,IAE7BgB,MAAM,6EAEV5B,EAAS,IACTC,EAAS,MACV,OAcqBD,SAAUA,EAAUC,SAAUA,EAC9BN,MAAOA,EAAOC,MAAOA,OAG/B,8BAAMgB,SCpGbiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20140ce3.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {StateType} from \"./App\";\r\n\r\ntype AnswerPropsType = {\r\n    answer: StateType\r\n    questionsID: string\r\n    changeAnswerAndQuestion: (questionID: string, answerID: string) => void\r\n    setRight: (value:string) => void\r\n    setWrong: (value:string) => void\r\n    right:string\r\n    wrong:string\r\n}\r\n\r\nexport const Answer = (props: AnswerPropsType) => {\r\n\r\n\r\n    return <div className={'answerContainer'}>\r\n        <ul className={'answers'}>\r\n            {\r\n                props.answer[props.questionsID].map((el, index) => {\r\n                    const onClickHandler = () => {\r\n\r\n                        if (el.isRight) {\r\n                            props.changeAnswerAndQuestion(props.questionsID, el.id)\r\n                            props.setRight('right')\r\n\r\n                        } else {\r\n                            props.changeAnswerAndQuestion(props.questionsID, el.id)\r\n                            props.setWrong('wrong')\r\n                        }\r\n                    }\r\n                    return <li key={index} className={el.isRight ? props.right : props.wrong} onClick={onClickHandler}> {el.answer} </li>\r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\ntype QuestionPropsType = {\r\n    question: string\r\n}\r\n\r\nexport const Question = (props:QuestionPropsType) => {\r\n    return <div className={'questionContainer'}>\r\n        <h1>Question</h1>\r\n        <h2>{props.question} ? </h2>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport {Answer} from './Answer';\nimport './App.css';\nimport {Question} from './Question';\nimport {v1} from \"uuid\";\n\ntype QuestionType = {\n    id: string\n    title: string\n}\n\nexport type AnswerType = {\n    id: string,\n    answer: string,\n    isRight: boolean\n}\n\nexport type StateType = {\n    [key: string]: Array<AnswerType>\n}\n\nfunction App() {\n\n    const firstQuestionID = v1()\n    const secondQuestionID = v1()\n    const thirdQuestionID = v1()\n\n\n    const [right, setRight] = useState('')\n    const [wrong, setWrong] = useState('')\n\n    const [currentQuestion, setCurrentQuestion] = useState(0)\n\n    const [rightAnswer, setRightAnswer] = useState(0)\n\n    const [questions, setQuestions] = useState<Array<QuestionType>>([\n        {id: firstQuestionID, title: 'Что такое React'},\n        {id: secondQuestionID, title: 'Почему мы используем React'},\n        {id: thirdQuestionID, title: 'Что такое Virtual Dom'}\n    ])\n\n    const [state, setState] = useState<StateType>({\n        [firstQuestionID]: [\n            {\n                id: firstQuestionID,\n                answer: 'Это декларативная, эффективная и гибкая JavaScript библиотека для создания пользовательских интерфейсов.',\n                isRight: true\n            },\n            {id: v1(), answer: 'Это полноценный фрейморк', isRight: false},\n            {id: v1(), answer: 'Это вообще язык программирования ', isRight: false},\n        ],\n        [secondQuestionID]: [\n            {\n                id: v1(),\n                answer: 'Так как нет других варинатов',\n                isRight: false\n            },\n            {id: secondQuestionID, answer: 'Из-за скорости работы ,благодаря Virtual Dom', isRight: true},\n            {id: v1(), answer: 'Больше платят и он на хайпе', isRight: false},\n        ],\n        [thirdQuestionID]: [\n            {\n                id: v1(),\n                answer: 'Аналог на Shadow DOM',\n                isRight: false\n            },\n            {\n                id: v1(),\n                answer: 'это браузерная технология, предназначенная в основном для определения области видимости переменных и CSS в веб-компонентах.',\n                isRight: false\n            },\n            {\n                id: thirdQuestionID,\n                answer: \"это техника и набор библиотек / алгоритмов, которые позволяют нам улучшить производительность на клиентской стороне\",\n                isRight: true\n            },\n        ],\n\n    })\n\n\n    const titleForQuestion = questions.map(el => el.title)\n    const answersID = questions.map(el => el.id)\n\n    const changeAnswerAndQuestion = (questionID: string, answerID: string) => {\n\n        let question = state[questionID].find(f => f.id === answerID)\n        setTimeout(() => {\n            if (question && question.id === questionID) {\n                setCurrentQuestion(currentQuestion + 1)\n                setRightAnswer(rightAnswer + 1)\n            } else {\n                alert('Не правильный')\n            }\n            setRight('')\n            setWrong('')\n        }, 1500)\n\n    }\n\n    console.log(rightAnswer)\n\n    return <div className={'wrapper'}>\n        <div className={'container'}>\n            {\n                questions.length > currentQuestion\n                    ? <React.Fragment>\n                        <Question question={titleForQuestion[currentQuestion]}/>\n                        <Answer answer={state} questionsID={answersID[currentQuestion]}\n                                changeAnswerAndQuestion={changeAnswerAndQuestion}\n                                setRight={setRight} setWrong={setWrong}\n                                right={right} wrong={wrong}\n                        />\n                    </React.Fragment>\n                    : <div>{rightAnswer}</div>\n            }\n\n\n        </div>\n    </div>\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}