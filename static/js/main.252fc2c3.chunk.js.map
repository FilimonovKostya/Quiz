{"version":3,"sources":["Answer.tsx","Question.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Answer","props","className","answer","questionsID","map","el","index","isRight","right","onClick","changeAnswerAndQuestion","id","setRight","setLoading","setWrong","Question","question","App","firstQuestionID","v1","secondQuestionID","thirdQuestionID","useState","wrong","loading","currentQuestion","setCurrentQuestion","rightAnswer","setRightAnswer","title","questions","state","titleForQuestion","answersID","console","log","length","Fragment","CircularProgress","questionID","answerID","find","f","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252fc2c3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {StateType} from \"./App\";\r\n\r\ntype AnswerPropsType = {\r\n    answer: StateType\r\n    questionsID: string\r\n    changeAnswerAndQuestion: (questionID: string, answerID: string) => void\r\n    setRight: (value: string) => void\r\n    setWrong: (value: string) => void\r\n    right: string\r\n    wrong: string\r\n    setLoading:(boolean:boolean) => void\r\n}\r\n\r\nexport const Answer = (props: AnswerPropsType) => {\r\n\r\n\r\n    return <div className={'answerContainer'}>\r\n        <ul className={'answers'}>\r\n            {\r\n                props.answer[props.questionsID].map((el, index) => {\r\n                    const onClickHandler = () => {\r\n\r\n                        if (el.isRight) {\r\n                            props.changeAnswerAndQuestion(props.questionsID, el.id)\r\n                            props.setRight('right')\r\n                            props.setLoading(true)\r\n\r\n                        } else {\r\n                            props.changeAnswerAndQuestion(props.questionsID, el.id)\r\n                            props.setWrong('wrong')\r\n                            props.setLoading(true)\r\n\r\n                        }\r\n                    }\r\n                    return <li key={index} className={el.isRight ? props.right : ''} onClick={onClickHandler}> {el.answer}</li>\r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\ntype QuestionPropsType = {\r\n    question: string\r\n}\r\n\r\nexport const Question = (props:QuestionPropsType) => {\r\n    return <div className={'questionContainer'}>\r\n        <h1>Question</h1>\r\n        <h2>{props.question} ? </h2>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport {Answer} from './Answer';\nimport './App.css';\nimport {Question} from './Question';\nimport {v1} from \"uuid\";\nimport {CircularProgress, Paper} from \"@material-ui/core\";\n\ntype QuestionType = {\n    id: string\n    title: string\n}\n\nexport type AnswerType = {\n    id: string,\n    answer: string,\n    isRight: boolean\n}\n\nexport type StateType = {\n    [key: string]: Array<AnswerType>\n}\n\nfunction App() {\n\n    const firstQuestionID = v1()\n    const secondQuestionID = v1()\n    const thirdQuestionID = v1()\n\n\n    const [right, setRight] = useState('')\n    const [wrong, setWrong] = useState('')\n    const [loading, setLoading] = useState(false)\n\n    const [currentQuestion, setCurrentQuestion] = useState(0)\n\n    const [rightAnswer, setRightAnswer] = useState(0)\n\n    const [questions, setQuestions] = useState<Array<QuestionType>>([\n        {id: firstQuestionID, title: 'Что такое React'},\n        {id: secondQuestionID, title: 'Почему мы используем React'},\n        {id: thirdQuestionID, title: 'Что такое Virtual Dom'}\n    ])\n\n    const [state, setState] = useState<StateType>({\n        [firstQuestionID]: [\n            {\n                id: firstQuestionID,\n                answer: 'Это декларативная, эффективная и гибкая JavaScript библиотека для создания пользовательских интерфейсов.',\n                isRight: true\n            },\n            {id: v1(), answer: 'Это полноценный фрейморк', isRight: false},\n            {id: v1(), answer: 'Это вообще язык программирования ', isRight: false},\n        ],\n        [secondQuestionID]: [\n            {\n                id: v1(),\n                answer: 'Так как нет других варинатов',\n                isRight: false\n            },\n            {id: secondQuestionID, answer: 'Из-за скорости работы ,благодаря Virtual Dom', isRight: true},\n            {id: v1(), answer: 'Больше платят и он на хайпе', isRight: false},\n        ],\n        [thirdQuestionID]: [\n            {\n                id: v1(),\n                answer: 'Аналог на Shadow DOM',\n                isRight: false\n            },\n            {\n                id: v1(),\n                answer: 'это браузерная технология, предназначенная в основном для определения области видимости переменных и CSS в веб-компонентах.',\n                isRight: false\n            },\n            {\n                id: thirdQuestionID,\n                answer: \"это техника и набор библиотек / алгоритмов, которые позволяют нам улучшить производительность на клиентской стороне\",\n                isRight: true\n            },\n        ],\n\n    })\n\n\n    const titleForQuestion = questions.map(el => el.title)\n    const answersID = questions.map(el => el.id)\n\n    const changeAnswerAndQuestion = (questionID: string, answerID: string) => {\n\n        let question = state[questionID].find(f => f.id === answerID)\n        setTimeout(() => {\n            if (question && question.id === questionID) {\n                setCurrentQuestion(currentQuestion + 1)\n                setRightAnswer(rightAnswer + 1)\n                setRight('')\n                // setLoading(true)\n            } else {\n                setCurrentQuestion(currentQuestion + 1)\n                setWrong('')\n                // setLoading(true)\n            }\n            setLoading(false)\n\n        }, 1000)\n\n    }\n\n    console.log(rightAnswer)\n\n    return <div className={'wrapper'}>\n        <div className={'container'}>\n            {\n                questions.length > currentQuestion\n                    ? <React.Fragment>\n\n                        <Question question={titleForQuestion[currentQuestion]}/>\n                        {loading ?\n                            <CircularProgress/>\n                            : <Answer answer={state} questionsID={answersID[currentQuestion]}\n                                      changeAnswerAndQuestion={changeAnswerAndQuestion}\n                                      setRight={setRight} setWrong={setWrong}\n                                      right={right} wrong={wrong}\n                                      setLoading={setLoading}\n                            />\n\n\n                        }\n\n                    </React.Fragment>\n                    : <div>{rightAnswer}</div>\n            }\n\n        </div>\n    </div>\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}