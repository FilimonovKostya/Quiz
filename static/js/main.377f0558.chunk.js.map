{"version":3,"sources":["Question.tsx","Answer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Question","props","className","question","Answer","answer","answers","map","el","index","onClick","isRight","changeCurrentQuestion","currentQuestion","rightAnswers","counterRightAnswers","App","firstQuestionID","v1","secondQuestionID","thirdQuestionID","useState","currentValue","setCurrentValue","countRightAnswers","setCountRightAnswers","id","title","state","console","log","questions","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAMaA,G,MAAW,SAACC,GACrB,OAAO,sBAAKC,UAAW,oBAAhB,UACH,0CACA,+BAAKD,EAAME,SAAX,cCGKC,EAAS,SAACH,GAEnB,IAAMI,EAASJ,EAAMK,QAAQC,KAAI,SAACC,EAAIC,GASlC,OAAO,qBAAgBC,QAPA,WACfF,EAAGG,UACHV,EAAMW,sBAAsBX,EAAMY,gBAAkB,GACpDZ,EAAMa,aAAab,EAAMc,oBAAsB,KAIhD,cAA2CP,EAAGH,OAA9C,MAASI,MAGpB,OAAO,qBAAKP,UAAW,kBAAhB,SACH,oBAAIA,UAAW,UAAf,SACKG,O,QC6FEW,MAtGf,WAEI,IAAMC,EAAkBC,cAClBC,EAAmBD,cACnBE,EAAkBF,cAJb,EAM6BG,mBAAiB,GAN9C,mBAMJC,EANI,KAMUC,EANV,OAOuCF,mBAAiB,GAPxD,mBAOJG,EAPI,KAOeC,EAPf,OAUeJ,mBAA6B,CACnD,CACIK,GAAIT,EAAiBU,MAAO,0DAC5BrB,QAAS,CACL,CACIoB,GAAIT,EACJZ,OAAQ,qgBACRM,SAAS,GAEb,CACIe,GAAIR,cACJb,OAAQ,yIACRM,SAAS,GAEb,CACIe,GAAIR,cAAMb,OAAQ,qLAClBM,SAAS,KAIrB,CACIe,GAAIP,EAAkBQ,MAAO,uHAC7BrB,QAAS,CACL,CACIoB,GAAIR,cACJb,OAAQ,uJACRM,SAAS,GAEb,CACIe,GAAIP,EACJd,OAAQ,sLACRM,SAAS,GAEb,CACIe,GAAIR,cAAMb,OAAQ,4IAA+BM,SAAS,KAItE,CACIe,GAAIN,EACJO,MAAO,gEACPrB,QAAS,CACL,CACIoB,GAAIR,cACJb,OAAQ,+DACRM,SAAS,GAEb,CACIe,GAAIR,cACJb,OAAQ,ioBACRM,SAAS,GAEb,CACIe,GAAIN,EACJf,OAAQ,omBACRM,SAAS,OAjEd,mBAUJiB,EAVI,UAwEXC,QAAQC,IAAIN,GAEZ,IAAMO,EAAYH,EAAMN,GAAcK,MAChCrB,EAAyBsB,EAAMN,GAAchB,QAGnD,OAAO,qBAAKJ,UAAW,UAAhB,SACH,qBAAKA,UAAW,YAAhB,SAEI,cAAC,IAAM8B,SAAP,UAEQJ,EAAMK,SAAWX,EACX,qCAAE,cAAC,EAAD,CAAUnB,SAAU4B,IACpB,cAAC,EAAD,CAAQzB,QAASA,EACTO,gBAAiBS,EACjBV,sBAAuBW,EACvBT,aAAcW,EACdV,oBAAqBS,OAE/B,6BAAKA,WChGhBU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.377f0558.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype QuestionPropsType = {\r\n    question: string\r\n}\r\n\r\nexport const Question = (props:QuestionPropsType) => {\r\n    return <div className={'questionContainer'}>\r\n        <h1>Question</h1>\r\n        <h2>{props.question} ? </h2>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {AnswersType} from \"./App\";\r\n\r\n\r\ntype AnswerPropsType = {\r\n    answers: AnswersType[]\r\n    changeCurrentQuestion: (value: number) => void\r\n    currentQuestion: number\r\n    counterRightAnswers: number\r\n    rightAnswers: (value: number) => void\r\n}\r\n\r\nexport const Answer = (props: AnswerPropsType) => {\r\n\r\n    const answer = props.answers.map((el, index) => {\r\n\r\n        const changeQuestion = () => {\r\n            if (el.isRight) {\r\n                props.changeCurrentQuestion(props.currentQuestion + 1)\r\n                props.rightAnswers(props.counterRightAnswers + 1)\r\n            }\r\n        }\r\n\r\n        return <li key={index} onClick={changeQuestion}> {el.answer} </li>\r\n    })\r\n\r\n    return <div className={'answerContainer'}>\r\n        <ul className={'answers'}>\r\n            {answer}\r\n        </ul>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Question} from './Question';\nimport {Answer} from './Answer';\nimport {v1} from \"uuid\";\n\nexport type AnswersType = {\n    id: string\n    answer: string\n    isRight: boolean\n}\n\nexport type InitialStateType = {\n    id: string\n    title: string\n    answers: AnswersType[]\n}\n\n\nfunction App() {\n\n    const firstQuestionID = v1()\n    const secondQuestionID = v1()\n    const thirdQuestionID = v1()\n\n    const [currentValue, setCurrentValue] = useState<number>(0)\n    const [countRightAnswers, setCountRightAnswers] = useState<number>(0)\n\n\n    const [state, setState] = useState<InitialStateType[]>([\n        {\n            id: firstQuestionID, title: 'Что такое React',\n            answers: [\n                {\n                    id: firstQuestionID,\n                    answer: 'Это декларативная, эффективная и гибкая JavaScript библиотека для создания пользовательских интерфейсов.',\n                    isRight: true\n                },\n                {\n                    id: v1(),\n                    answer: 'Это полноценный фрейморк',\n                    isRight: false\n                },\n                {\n                    id: v1(), answer: 'Это вообще язык программирования ',\n                    isRight: false\n                }\n            ]\n        },\n        {\n            id: secondQuestionID, title: 'Почему мы используем React',\n            answers: [\n                {\n                    id: v1(),\n                    answer: 'Так как нет других варинатов',\n                    isRight: false\n                },\n                {\n                    id: secondQuestionID,\n                    answer: 'Из-за скорости работы ,благодаря Virtual Dom',\n                    isRight: true\n                },\n                {\n                    id: v1(), answer: 'Больше платят и он на хайпе', isRight: false\n                }\n            ]\n        },\n        {\n            id: thirdQuestionID,\n            title: 'Что такое Virtual Dom',\n            answers: [\n                {\n                    id: v1(),\n                    answer: 'Аналог на Shadow DOM',\n                    isRight: false\n                },\n                {\n                    id: v1(),\n                    answer: 'это браузерная технология, предназначенная в основном для определения области видимости переменных и CSS в веб-компонентах.',\n                    isRight: false\n                },\n                {\n                    id: thirdQuestionID,\n                    answer: \"это техника и набор библиотек  алгоритмов, которые позволяют нам улучшить производительность на клиентской стороне\",\n                    isRight: true\n                }\n            ]\n        },\n\n    ])\n\n    console.log(countRightAnswers)\n\n    const questions = state[currentValue].title\n    const answers: AnswersType[] = state[currentValue].answers\n\n\n    return <div className={'wrapper'}>\n        <div className={'container'}>\n\n            <React.Fragment>\n                {\n                    state.length !== currentValue\n                        ? <><Question question={questions}/>\n                            <Answer answers={answers}\n                                    currentQuestion={currentValue}\n                                    changeCurrentQuestion={setCurrentValue}\n                                    rightAnswers={setCountRightAnswers}\n                                    counterRightAnswers={countRightAnswers}\n                            /></>\n                        : <h1>{countRightAnswers}</h1>\n\n                }\n\n            </React.Fragment>\n\n        </div>\n    </div>\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}